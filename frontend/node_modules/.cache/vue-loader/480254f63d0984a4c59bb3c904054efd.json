{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/Main.vue?vue&type=style&index=0&id=54d3a52e&lang=css&","dependencies":[{"path":"/app/src/components/Main.vue","mtime":1685257708681},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1683075407339},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1683075407832},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1683075407513},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1683075407012},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1683075407633}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb21wbGV0ZWQtdGFzayB7CiAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7Cn0KLnNjcm9sbGFibGUtdGV4dCB7CiAgb3ZlcmZsb3cteDogYXV0bzsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwp9CgouZml4ZWQgewogIHBvc2l0aW9uOiBmaXhlZDsKICBib3R0b206IDA7CiAgbGVmdDogMDsKICByaWdodDogMDsKICB6LWluZGV4OiAxMDA7CiAgcGFkZGluZzogMDsKfQoK"},{"version":3,"sources":["Main.vue"],"names":[],"mappings":";AA4MA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Main.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"orange lighten-5\" style=\"position: relative; min-height: 100%; margin-top: 50px;\">\n    <v-main ref=\"mainComponent\">\n\n      <div v-if=\"tasks.length > 0\">\n          <v-btn @click=\"openModal\">ブックマークに追加</v-btn>\n          <v-btn @click=\"removeAllTask\">全て削除</v-btn>\n      </div>\n\n      <v-container class=\"pb-5\" v-if=\"tasks.length > 0\">\n        <draggable \n        v-model=\"tasks\"\n        :animation=\"300\"\n        handle=\".drag-handle\">\n          <v-row v-for=\"(task, index) in tasks\" :key=\"task.id\" class=\"align-center my-0 py-0\" style=\"min-height: 40px; max-height: 40px;\">\n            <v-col cols=\"2\" class=\"d-flex justify-center align-center pa-0 ma-0\">\n              <v-btn small @click=\"deleteTask(index)\" class=\"todo-reorder text-capitalize\" icon>\n                <v-icon>\n                  mdi-backspace\n                </v-icon>\n              </v-btn>\n            </v-col>\n            <v-col cols=\"1\" class=\"d-flex justify-center align-center pa-0 ma-0\">\n              <v-checkbox\n              class=\"todo-checkbox\"\n              v-model=\"task.completed\"\n              ></v-checkbox>\n            </v-col>\n            <v-col cols=\"7\" class=\"d-flex align-center pa-0 ma-0\">\n              <div class=\"scrollable-text\">\n                <p class=\"text-center mb-0\" :class=\"{ 'completed-task': task.completed }\">{{ task.text }}</p>\n              </div>\n            </v-col>\n            <v-col cols=\"2\" class=\"d-flex justify-center align-center pa-0 ma-0\">\n              <v-app-bar-nav-icon class=\"drag-handle\"></v-app-bar-nav-icon>\n            </v-col>\n          </v-row>\n        </draggable>\n      </v-container>\n\n      <v-container class=\"fixed\">\n        <v-row\n          position=\"fixed\"\n          bottom\n          justify=\"center\"\n          class=\"align-center my-0 py-0\"\n          style=\"width: 100%; z-index: 1000; margin-bottom: ;\"\n        >\n          <v-col class=\"d-flex justify-center align-center\" cols=\"1\">\n            <v-btn small @click=\"removeAllTask\" class=\"text-capitalize ma-1\" icon>\n              <v-icon>\n                mdi-delete\n              </v-icon>\n            </v-btn>\n          </v-col>\n          <v-col cols=\"8\">\n            <v-text-field\n              label=\"入力して購入リストに追加\"\n              class=\"todo-input\"\n              color=\"#F57C00\"\n              v-model=\"newTaskText\"\n            ></v-text-field>\n          </v-col>\n          <v-col class=\"d-flex justify-center align-center\" cols=\"1\">\n            <v-btn small @click=\"addTask\" class=\"todo-reorder text-capitalize ma-1\" icon>\n              <v-icon>\n                mdi-plus-circle-outline\n              </v-icon>\n            </v-btn>\n          </v-col>\n        </v-row>\n      </v-container>\n\n      <v-dialog v-model=\"modalOpen\" max-width=\"500\">\n        <v-card>\n          <v-card-title>ブックマークに追加</v-card-title>\n          <v-card-text>\n            <v-text-field v-model=\"bookmarkName\" label=\"ブックマーク名\"></v-text-field>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"primary\" @click=\"addToBookmarks\">追加</v-btn>\n            <v-btn @click=\"closeModal\">キャンセル</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-main>\n  </div>\n</template>\n\n\n<script lang=\"ts\">\nimport { Vue, Component, Watch } from \"vue-property-decorator\";\nimport draggable from \"vuedraggable\";\nimport { EventBus } from \"@/event-bus\";\n\n@Component({\n  components: {\n    draggable,\n  },\n})\n\nexport default class MainComponent extends Vue {\n  tasks: { id: number; text: string; completed: boolean }[] = [];\n  bookmarks: { id: number; name: string; tasks: any[] }[] = [];\n  nextBookmarkID = Number(localStorage.getItem(\"nextBookmarkID\")) || 1;\n  bookmarkName = \"\";\n  checkbox = true;\n  newTaskText = \"\";\n  nextTaskID = Number(localStorage.getItem(\"nextTaskID\")) || 1;\n  modalOpen = false;\n  \n  mounted() {\n    const storedTasks = localStorage.getItem(\"tasks\");\n    const storedBookmarks = localStorage.getItem(\"bookmarks\");\n    if (storedTasks) {\n      this.tasks = JSON.parse(storedTasks);x\n    } else if (storedBookmarks) {\n      this.bookmarks = JSON.parse(storedBookmarks);\n    } else {\n      return;\n    }\n  }\n\n  // `task`プロパティの変更を監視\n  @Watch(\"tasks\", { deep: true })\n  updateLocalStorage() {\n    localStorage.setItem(\"tasks\", JSON.stringify(this.tasks));\n  }\n　\n  // タスクの追加\n  addTask() {\n    if (this.newTaskText) {\n      this.tasks.push({\n        id: this.nextTaskID,\n        text: this.newTaskText,\n        completed: false,\n      });\n    }\n    if(this.tasks.length === 1) {\n      this.$forceUpdate();\n    }\n    this.nextTaskID++;\n    this.newTaskText = \"\";\n    localStorage.setItem(\"nextTaskID\", String(this.nextTaskID));\n    console.log(this.tasks);\n  }\n\n  // ブックマークを追加\n  addToBookmarks() {\n  const tasksData = localStorage.getItem(\"tasks\");\n  if (tasksData) {\n    const tasks = JSON.parse(tasksData);\n    const bookmark = {\n      id: this.nextBookmarkID,\n      name: this.bookmarkName,\n      tasks: tasks,\n    };\n    const storedBookmarks = localStorage.getItem(\"bookmarks\");\n    let bookmarks = [];\n    if (storedBookmarks) {\n      bookmarks = JSON.parse(storedBookmarks);\n    }\n    bookmarks = [...bookmarks, bookmark];\n    localStorage.setItem(\"bookmarks\", JSON.stringify(bookmarks));\n\n    EventBus.$emit(\"bookmarks-updated\", this.bookmarks);\n\n    this.closeModal();\n    this.nextBookmarkID++;\n    localStorage.setItem(\"nextBookmarkID\", String(this.nextBookmarkID));\n  }\n}\n\n  \n  // タスクの削除\n  deleteTask(index: number) {\n    this.tasks.splice(index, 1);\n  }\n\n  // タスクの完了/未完了の判定\n  toggleTaskCompletion(task: { completed: boolean }) {\n    task.completed = !task.completed;\n   }\n\n  // 全タスクを削除\n  removeAllTask() {\n    if(window.confirm(\"すべての買い物リストを削除しますか？\")) {\n      this.tasks = [];\n    }\n  }\n\n  // モーダルウィンドウの開閉\n  openModal() {\n    this.modalOpen = true;\n  }\n  closeModal() {\n    this.modalOpen = false;\n    this.bookmarkName = \"\";\n  }\n\n}\n</script>\n\n<style>\n.completed-task {\n  text-decoration: line-through;\n}\n.scrollable-text {\n  overflow-x: auto;\n  white-space: nowrap;\n}\n\n.fixed {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 100;\n  padding: 0;\n}\n\n</style>"]}]}